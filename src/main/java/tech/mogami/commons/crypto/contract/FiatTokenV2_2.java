package tech.mogami.commons.crypto.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.7.0.
 */
@SuppressWarnings("rawtypes")
public class FiatTokenV2_2 extends Contract {
    public static final String BINARY = new StringBuilder().appendappend("3130333930666435623833363133663731383136313531656435363562313536313366633735373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630323538313532363032303031383036313732316536303235393133393630343030313931353035303630343035313830393130333930666435623631336664323333383638363631353233643536356236303031393235303530353039323931353035303536356236303030383035343930363130313030306139303034373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363333373366666666666666666666666666666666666666666666666666666666666666666666666666666666313631343631343039663537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032303831353236303230303138303766346637373665363136323663363533613230363336313663366336353732323036393733323036653666373432303734363836353230366637373665363537323831353235303630323030313931353035303630343035313830393130333930666435623630303037336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831373366666666666666666666666666666666666666666666666666666666666666666666666666666666313631343135363134313235353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303266383135323630323030313830363136666462363032663931333936303430303139313530353036303430353138303931303339306664356238303630303836303030363130313030306138313534383137336666666666666666666666666666666666666666666666666666666666666666666666666666666630323139313639303833373366666666666666666666666666666666666666666666666666666666666666666666666666666666313630323137393035353530363030383630303039303534393036313031303030613930303437336666666666666666666666666666666666666666666666666666666666666666666666666666666631363733666666666666666666666666666666666666666666666666666666666666666666666666666666663136376664623636646661396336623866353232366665396161633765353138393761653865653934616333316463373062623663393930306232353734623730376536363034303531363034303531383039313033393061323530353635623630303036303063363030303833373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831353236303230303139303831353236303230303136303030323036303030393035343930363130313030306139303034363066663136393035303931393035303536356236303030383035343930363130313030306139303034373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363333373366666666666666666666666666666666666666666666666666666666666666666666666666666666313631343631343265353537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032303831353236303230303138303766346637373665363136323663363533613230363336313663366336353732323036393733323036653666373432303734363836353230366637373665363537323831353235303630323030313931353035303630343035313830393130333930666435623630303037336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831373366666666666666666666666666666666666666666666666666666666666666666666666666666666313631343135363134333662353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303332383135323630323030313830363137316563363033323931333936303430303139313530353036303430353138303931303339306664356238303630303236303030363130313030306138313534383137336666666666666666666666666666666666666666666666666666666666666666666666666666666630323139313639303833373366666666666666666666666666666666666666666666666666666666666666666666666666666666313630323137393035353530363030323630303039303534393036313031303030613930303437336666666666666666666666666666666666666666666666666666666666666666666666666666666631363733666666666666666666666666666666666666666666666666666666666666666666666666666666663136376663363733393830313263313131636539356563623734323962393333303936633937373338306565366334323131373561373161346134633663383863303665363034303531363034303531383039313033393061323530353635623630306536303030393035343930363130313030306139303034373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363333373366666666666666666666666666666666666666666666666666666666666666666666666666666666313631343631343462613537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032343831353236303230303138303631373030613630323439313339363034303031393135303530363034303531383039313033393066643562363134346535383238323835373366666666666666666666666666666666666666666666666666666666666666666666666666666666313636313565356639303932393139303633666666666666666631363536356235303530353035363562363030313630313439303534393036313031303030613930303436306666313631353631343536643537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363031303831353236303230303138303766353036313735373336313632366336353361323037303631373537333635363430303030303030303030303030303030303030303030303030303030303030303831353235303630323030313931353035303630343035313830393130333930666435623631343537383833383338333631356630313536356235303530353035363562363030323630303039303534393036313031303030613930303437336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831353635623630303136303134393035343930363130313030306139303034363066663136313536313436323635373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630313038313532363032303031383037663530363137353733363136323663363533613230373036313735373336353634303030303030303030303030303030303030303030303030303030303030303038313532353036303230303139313530353036303430353138303931303339306664356238363631343633303831363135316564353635623135363134363836353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303235383135323630323030313830363137323165363032353931333936303430303139313530353036303430353138303931303339306664356238363631343639303831363135316564353635623135363134366536353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303235383135323630323030313830363137323165363032353931333936303430303139313530353036303430353138303931303339306664356236313436663538393839383938393839383938393631363033373536356235303530353035303530353035303530353035363562363030313630313439303534393036313031303030613930303436306666313631353631343738333537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363031303831353236303230303138303766353036313735373336313632366336353361323037303631373537333635363430303030303030303030303030303030303030303030303030303030303030303831353235303630323030313931353035303630343035313830393130333930666435623631343739323837383738373837383738373837363136313131353635623530353035303530353035303530353635623630303836303134393035343930363130313030306139303034363066663136383031353631343763393537353036303030363031323630303039303534393036313031303030613930303436306666313636306666313631343562363134376432353736303030383066643562383138313630303439313930363134376533393239313930363136633433353635623530363134383637383238323830383036303166303136303230383039313034303236303230303136303430353139303831303136303430353238303933393239313930383138313532363032303031383338333830383238343337363030303831383430313532363031663139363031663832303131363930353038303833303139323530353035303530353035303530363034303531383036303430303136303430353238303630303138313532363032303031376633323030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323530363136313563353635623630306638313930353535303630303136303132363030303631303130303061383135343831363066663032313931363930383336306666313630323137393035353530353035303536356237663135386230613965646637613832386161643032663633636435313563363865663266353062613830373339366636643132383432383333613135393734323936303030316238313536356236303030363030613630303038343733666666666666666666666666666666666666666666666666666666666666666666666666666666663136373366666666666666666666666666666666666666666666666666666666666666666666666666666666313638313532363032303031393038313532363032303031363030303230363030303833373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831353236303230303139303831353236303230303136303030323035343930353039323931353035303536356236303031363031343930353439303631303130303061393030343630666631363135363134396265353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303130383135323630323030313830376635303631373537333631363236633635336132303730363137353733363536343030303030303030303030303030303030303030303030303030303030303030383135323530363032303031393135303530363034303531383039313033393066643562383836313439633838313631353165643536356231353631346131653537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032353831353236303230303138303631373231653630323539313339363034303031393135303530363034303531383039313033393066643562383836313461323838313631353165643536356231353631346137653537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032353831353236303230303138303631373231653630323539313339363034303031393135303530363034303531383039313033393066643562363134613866386238623862386238623862386238623862363136313736353635623530353035303530353035303530353035303530353035363562363030373830353436303031383136303031313631353631303130303032303331363630303239303034383036303166303136303230383039313034303236303230303136303430353139303831303136303430353238303932393139303831383135323630323030313832383035343630303138313630303131363135363130313030303230333136363030323930303438303135363134623332353738303630316631303631346230373537363130313030383038333534303430323833353239313630323030313931363134623332353635623832303139313930363030303532363032303630303032303930356238313534383135323930363030313031393036303230303138303833313136313462313535373832393030333630316631363832303139313562353035303530353035303831353635623630303036303130363030303834373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831353236303230303139303831353236303230303136303030323036303030383338313532363032303031393038313532363032303031363030303230363030303930353439303631303130303061393030343630666631363930353039323931353035303536356236303031363031343930353439303631303130303061393030343630666631363135363134633235353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303130383135323630323030313830376635303631373537333631363236633635336132303730363137353733363536343030303030303030303030303030303030303030303030303030303030303030383135323530363032303031393135303530363034303531383039313033393066643562383836313463326638313631353165643536356231353631346338353537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032353831353236303230303138303631373231653630323539313339363034303031393135303530363034303531383039313033393066643562383836313463386638313631353165643536356231353631346365353537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032353831353236303230303138303631373231653630323539313339363034303031393135303530363034303531383039313033393066643562363134636636386238623862386238623862386238623862363136316335353635623530353035303530353035303530353035303530353035363562363030303830353439303631303130303061393030343733666666666666666666666666666666666666666666666666666666666666666666666666666666663136373366666666666666666666666666666666666666666666666666666666666666666666666666666666313633333733666666666666666666666666666666666666666666666666666666666666666666666666666666663136313436313464633435373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630323038313532363032303031383037663466373736653631363236633635336132303633363136633663363537323230363937333230366536663734323037343638363532303666373736653635373238313532353036303230303139313530353036303430353138303931303339306664356236303030373366666666666666666666666666666666666666666666666666666666666666666666666666666666313638313733666666666666666666666666666666666666666666666666666666666666666666666666666666663136313431353631346534613537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032363831353236303230303138303631366465303630323639313339363034303031393135303530363034303531383039313033393066643562376638626530303739633533313635393134313334346364316664306134663238343139343937663937323261336461616665336234313836663662363435376530363030303830353439303631303130303061393030343733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383236303430353138303833373366666666666666666666666666666666666666666666666666666666666666666666666666666666313638313532363032303031383237336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831353236303230303139323530353035303630343035313830393130333930613136313465646538313631353535383536356235303536356236303032363030303930353439303631303130303061393030343733666666666666666666666666666666666666666666666666666666666666666666666666666666663136373366666666666666666666666666666666666666666666666666666666666666666666666666666666313633333733666666666666666666666666666666666666666666666666666666666666666666666666666666663136313436313466383735373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630326338313532363032303031383036313666313836303263393133393630343030313931353035303630343035313830393130333930666435623631346639303831363135353461353635623830373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637666666613465363138313737373639323536356366323835323866633838666431353136656138366235366461303735323335666135373561663661346238353536303430353136303430353138303931303339306132353035363562363030303631346665313832363135316564353635623930353039313930353035363562363030303733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383337336666666666666666666666666666666666666666666666666666666666666666666666666666666631363134313536313530366535373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630323438313532363032303031383036313730663836303234393133393630343030313931353035303630343035313830393130333930666435623630303037336666666666666666666666666666666666666666666666666666666666666666666666666666666631363832373366666666666666666666666666666666666666666666666666666666666666666666666666666666313631343135363135306634353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303232383135323630323030313830363136653036363032323931333936303430303139313530353036303430353138303931303339306664356238303630306136303030383537336666666666666666666666666666666666666666666666666666666666666666666666666666666631363733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383135323630323030313930383135323630323030313630303032303630303038343733666666666666666666666666666666666666666666666666666666666666666666666666666666663136373366666666666666666666666666666666666666666666666666666666666666666666666666666666313638313532363032303031393038313532363032303031363030303230383139303535353038313733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383337336666666666666666666666666666666666666666666666666666666666666666666666666666666631363766386335626531653565626563376435626431346637313432376431653834663364643033313463306637623232393165356232303061633863376333623932353833363034303531383038323831353236303230303139313530353036303430353138303931303339306133353035303530353635623631353165613831363030303631363231343536356235303536356236303030363030313630666636303039363030303835373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831353236303230303139303831353236303230303136303030323035343930316331343930353039313930353035363562363030303733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383337336666666666666666666666666666666666666666666666666666666666666666666666666666666631363134313536313532633335373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630323538313532363032303031383036313730643336303235393133393630343030313931353035303630343035313830393130333930666435623630303037336666666666666666666666666666666666666666666666666666666666666666666666666666666631363832373366666666666666666666666666666666666666666666666666666666666666666666666666666666313631343135363135333439353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303233383135323630323030313830363136643165363032333931333936303430303139313530353036303430353138303931303339306664356236313533353238333631353464663536356238313131313536313533616135373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630323638313532363032303031383036313665633936303236393133393630343030313931353035303630343035313830393130333930666435623631353363653833363135336339383336313533626238373631353464663536356236313534356339303931393036336666666666666666313635363562363135376139353635623631353366323832363135336564383336313533646638363631353464663536356236313537323139303931393036336666666666666666313635363562363135376139353635623831373366666666666666666666666666666666666666666666666666666666666666666666666666666666313638333733666666666666666666666666666666666666666666666666666666666666666666666666666666663136376664646632353261643162653263383962363963326230363866633337386461613935326261376631363363346131313632386635356134646635323362336566383336303430353138303832383135323630323030313931353035303630343035313830393130333930613335303530353035363562363030303832383231313135363135346434353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303165383135323630323030313830376635333631363636353464363137343638336132303733373536323734373236313633373436393666366532303666373636353732363636633666373730303030383135323530363032303031393135303530363034303531383039313033393066643562383138333033393035303932393135303530353635623630303037663766666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666636303039363030303834373366666666666666666666666666666666666666666666666666666666666666666666666666666666313637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831353236303230303139303831353236303230303136303030323035343136393035303931393035303536356236313535353538313630303136313632313435363562353035363562383036303030383036313031303030613831353438313733666666666666666666666666666666666666666666666666666666666666666666666666666666663032313931363930383337336666666666666666666666666666666666666666666666666666666666666666666666666666666631363032313739303535353035303536356236303030363135363765363030343830353436303031383136303031313631353631303130303032303331363630303239303034383036303166303136303230383039313034303236303230303136303430353139303831303136303430353238303932393139303831383135323630323030313832383035343630303138313630303131363135363130313030303230333136363030323930303438303135363135363336353738303630316631303631353630623537363130313030383038333534303430323833353239313630323030313931363135363336353635623832303139313930363030303532363032303630303032303930356238313534383135323930363030313031393036303230303138303833313136313536313935373832393030333630316631363832303139313562353035303530353035303630343035313830363034303031363034303532383036303031383135323630323030313766333230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353235303631353637393631363264313536356236313632646535363562393035303930353635623631353731633833383336313537313738343630306136303030383937336666666666666666666666666666666666666666666666666666666666666666666666666666666631363733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383135323630323030313930383135323630323030313630303032303630303038383733666666666666666666666666666666666666666666666666666666666666666666666666666666663136373366666666666666666666666666666666666666666666666666666666666666666666666666666666313638313532363032303031393038313532363032303031363030303230353436313537323139303931393036336666666666666666313635363562363134666538353635623530353035303536356236303030383038323834303139303530383338313130313536313537396635373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630316238313532363032303031383037663533363136363635346436313734363833613230363136343634363937343639366636653230366637363635373236363663366637373030303030303030303038313532353036303230303139313530353036303430353138303931303339306664356238303931353035303932393135303530353635623766376666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663831313131353631353832323537363034303531376630386333373961303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383135323630303430313830383036303230303138323831303338323532363032613831353236303230303138303631366634343630326139313339363034303031393135303530363034303531383039313033393066643562363135383262383236313531656435363562313536313538383135373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630323538313532363032303031383036313665376236303235393133393630343030313931353035303630343035313830393130333930666435623830363030393630303038343733666666666666666666666666666666666666666666666666666666666666666666666666666666663136373366666666666666666666666666666666666666666666666666666666666666666666666666666666313638313532363032303031393038313532363032303031363030303230383139303535353035303530353635623631353930393835383538343834383736303430353136303230303138303834383135323630323030313833383135323630323030313832363066663136363066383162383135323630303130313933353035303530353036303430353136303230383138333033303338313532393036303430353236313566303135363562353035303530353035303536356233333733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383637336666666666666666666666666666666666666666666666666666666666666666666666666666666631363134363135393934353736303430353137663038633337396130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038313532363030343031383038303630323030313832383130333832353236303235383135323630323030313830363137303834363032353931333936303430303139313530353036303430353138303931303339306664356236313539613038373833383638363631363337343536356236313561353038373766643039396363393865663731313037613631366334663066393431663034633332326438653235346665323662336336363638646238376161653431336465383630303031623839383938393839383938393630343035313630323030313830383838313532363032303031383737336666666666666666666666666666666666666666666666666666666666666666666666666666666631363831353236303230303138363733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383135323630323030313835383135323630323030313834383135323630323030313833383135323630323030313832383135323630323030313937353035303530353035303530353035303630343035313630323038313833303330333831353239303630343035323830353139303630323030313230383336313634333435363562363135613561383738333631363564303536356236313561363538373837383736313532336435363562353035303530353035303530353035363562376666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666383231343830363135613963353735303432383231303135356236313562306535373630343035313766303863333739613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303831353236303034303138303830363032303031383238313033383235323630316538313532363032303031383037663436363936313734353436663662363536653536333233613230373036353732366436393734323036393733323036353738373036393732363536343030303038313532353036303230303139313530353036303430353138303931303339306664356236303030363135633062363135623162363135353962353635623766366537316564616531326231623937663464316636303337306665663130313035666132666161653031323631313461313639633634383435643631323663393630303031623838383838383630313136303030386437336666666666666666666666666666666666666666666666666666666666666666666666666666666631363733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383135323630323030313930383135323630323030313630303032303630303038313534383039323931393036303031303139313930353035353839363034303531363032303031383038373831353236303230303138363733666666666666666666666666666666666666666666666666666666666666666666666666666666663136383135323630323030313835373366666666666666666666666666666666666666666666666666666666666666666666666666666666313638313532363032303031383438313532363032303031383338313532363032303031383238313532363032303031393635303530353035303530353035303630343035313630323038313833303330333831353239303630343035323830353139303630323030313230363136363831353635623930353037335f5f2438363963343139623466313234313161663630663265396164333834353736336133245f5ff5f2438363963343139623466313234313161663630663265396164333834353736336133245f5ftoString();

    private static String librariesLinkedBinary;

    public static final String FUNC_CANCEL_AUTHORIZATION_TYPEHASH = "CANCEL_AUTHORIZATION_TYPEHASH";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_PERMIT_TYPEHASH = "PERMIT_TYPEHASH";

    public static final String FUNC_RECEIVE_WITH_AUTHORIZATION_TYPEHASH = "RECEIVE_WITH_AUTHORIZATION_TYPEHASH";

    public static final String FUNC_TRANSFER_WITH_AUTHORIZATION_TYPEHASH = "TRANSFER_WITH_AUTHORIZATION_TYPEHASH";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_AUTHORIZATIONSTATE = "authorizationState";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BLACKLIST = "blacklist";

    public static final String FUNC_BLACKLISTER = "blacklister";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_cancelAuthorization = "cancelAuthorization";

    public static final String FUNC_CONFIGUREMINTER = "configureMinter";

    public static final String FUNC_CURRENCY = "currency";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_INITIALIZEV2 = "initializeV2";

    public static final String FUNC_INITIALIZEV2_1 = "initializeV2_1";

    public static final String FUNC_INITIALIZEV2_2 = "initializeV2_2";

    public static final String FUNC_ISBLACKLISTED = "isBlacklisted";

    public static final String FUNC_ISMINTER = "isMinter";

    public static final String FUNC_MASTERMINTER = "masterMinter";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTERALLOWANCE = "minterAllowance";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PAUSER = "pauser";

    public static final String FUNC_permit = "permit";

    public static final String FUNC_receiveWithAuthorization = "receiveWithAuthorization";

    public static final String FUNC_REMOVEMINTER = "removeMinter";

    public static final String FUNC_RESCUEERC20 = "rescueERC20";

    public static final String FUNC_RESCUER = "rescuer";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_transferWithAuthorization = "transferWithAuthorization";

    public static final String FUNC_UNBLACKLIST = "unBlacklist";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_UPDATEBLACKLISTER = "updateBlacklister";

    public static final String FUNC_UPDATEMASTERMINTER = "updateMasterMinter";

    public static final String FUNC_UPDATEPAUSER = "updatePauser";

    public static final String FUNC_UPDATERESCUER = "updateRescuer";

    public static final String FUNC_VERSION = "version";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUTHORIZATIONCANCELED_EVENT = new Event("AuthorizationCanceled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event AUTHORIZATIONUSED_EVENT = new Event("AuthorizationUsed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event BLACKLISTED_EVENT = new Event("Blacklisted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event BLACKLISTERCHANGED_EVENT = new Event("BlacklisterChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event BURN_EVENT = new Event("Burn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MASTERMINTERCHANGED_EVENT = new Event("MasterMinterChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MINT_EVENT = new Event("Mint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MINTERCONFIGURED_EVENT = new Event("MinterConfigured", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MINTERREMOVED_EVENT = new Event("MinterRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event PAUSE_EVENT = new Event("Pause", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event PAUSERCHANGED_EVENT = new Event("PauserChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event RESCUERCHANGED_EVENT = new Event("RescuerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNBLACKLISTED_EVENT = new Event("UnBlacklisted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event UNPAUSE_EVENT = new Event("Unpause", 
            Arrays.<TypeReference<?>>asList());
    ;

    @Deprecated
    protected FiatTokenV2_2(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FiatTokenV2_2(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FiatTokenV2_2(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FiatTokenV2_2(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> CANCEL_AUTHORIZATION_TYPEHASH() {
        final Function function = new Function(FUNC_CANCEL_AUTHORIZATION_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PERMIT_TYPEHASH() {
        final Function function = new Function(FUNC_PERMIT_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> RECEIVE_WITH_AUTHORIZATION_TYPEHASH() {
        final Function function = new Function(FUNC_RECEIVE_WITH_AUTHORIZATION_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> TRANSFER_WITH_AUTHORIZATION_TYPEHASH() {
        final Function function = new Function(FUNC_TRANSFER_WITH_AUTHORIZATION_TYPEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> authorizationState(String authorizer, byte[] nonce) {
        final Function function = new Function(FUNC_AUTHORIZATIONSTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, authorizer), 
                new org.web3j.abi.datatypes.generated.Bytes32(nonce)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> blacklist(String _account) {
        final Function function = new Function(
                FUNC_BLACKLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> blacklister() {
        final Function function = new Function(FUNC_BLACKLISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger _amount) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelAuthorization(String authorizer,
            byte[] nonce, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_cancelAuthorization, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, authorizer), 
                new org.web3j.abi.datatypes.generated.Bytes32(nonce), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelAuthorization(String authorizer,
            byte[] nonce, byte[] signature) {
        final Function function = new Function(
                FUNC_cancelAuthorization, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, authorizer), 
                new org.web3j.abi.datatypes.generated.Bytes32(nonce), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> configureMinter(String minter,
            BigInteger minterAllowedAmount) {
        final Function function = new Function(
                FUNC_CONFIGUREMINTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, minter), 
                new org.web3j.abi.datatypes.generated.Uint256(minterAllowedAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> currency() {
        final Function function = new Function(FUNC_CURRENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(String spender,
            BigInteger decrement) {
        final Function function = new Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(decrement)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(String spender,
            BigInteger increment) {
        final Function function = new Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(increment)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String tokenName, String tokenSymbol,
            String tokenCurrency, BigInteger tokenDecimals, String newMasterMinter,
            String newPauser, String newBlacklister, String newOwner) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tokenName), 
                new org.web3j.abi.datatypes.Utf8String(tokenSymbol), 
                new org.web3j.abi.datatypes.Utf8String(tokenCurrency), 
                new org.web3j.abi.datatypes.generated.Uint8(tokenDecimals), 
                new org.web3j.abi.datatypes.Address(160, newMasterMinter), 
                new org.web3j.abi.datatypes.Address(160, newPauser), 
                new org.web3j.abi.datatypes.Address(160, newBlacklister), 
                new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initializeV2(String newName) {
        final Function function = new Function(
                FUNC_INITIALIZEV2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initializeV2_1(String lostAndFound) {
        final Function function = new Function(
                FUNC_INITIALIZEV2_1, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, lostAndFound)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initializeV2_2(List<String> accountsToBlacklist,
            String newSymbol) {
        final Function function = new Function(
                FUNC_INITIALIZEV2_2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accountsToBlacklist, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Utf8String(newSymbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isBlacklisted(String _account) {
        final Function function = new Function(FUNC_ISBLACKLISTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isMinter(String account) {
        final Function function = new Function(FUNC_ISMINTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> masterMinter() {
        final Function function = new Function(FUNC_MASTERMINTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String _to, BigInteger _amount) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> minterAllowance(String minter) {
        final Function function = new Function(FUNC_MINTERALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, minter)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nonces(String owner) {
        final Function function = new Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> pauser() {
        final Function function = new Function(FUNC_PAUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> permit(String owner, String spender,
            BigInteger value, BigInteger deadline, byte[] signature) {
        final Function function = new Function(
                FUNC_permit, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> permit(String owner, String spender,
            BigInteger value, BigInteger deadline, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_permit, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receiveWithAuthorization(String from, String to,
            BigInteger value, BigInteger validAfter, BigInteger validBefore, byte[] nonce,
            byte[] signature) {
        final Function function = new Function(
                FUNC_receiveWithAuthorization, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(validAfter), 
                new org.web3j.abi.datatypes.generated.Uint256(validBefore), 
                new org.web3j.abi.datatypes.generated.Bytes32(nonce), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receiveWithAuthorization(String from, String to,
            BigInteger value, BigInteger validAfter, BigInteger validBefore, byte[] nonce,
            BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_receiveWithAuthorization, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(validAfter), 
                new org.web3j.abi.datatypes.generated.Uint256(validBefore), 
                new org.web3j.abi.datatypes.generated.Bytes32(nonce), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeMinter(String minter) {
        final Function function = new Function(
                FUNC_REMOVEMINTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, minter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rescueERC20(String tokenContract, String to,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_RESCUEERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tokenContract), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> rescuer() {
        final Function function = new Function(FUNC_RESCUER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferWithAuthorization(String from, String to,
            BigInteger value, BigInteger validAfter, BigInteger validBefore, byte[] nonce,
            byte[] signature) {
        final Function function = new Function(
                FUNC_transferWithAuthorization, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(validAfter), 
                new org.web3j.abi.datatypes.generated.Uint256(validBefore), 
                new org.web3j.abi.datatypes.generated.Bytes32(nonce), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferWithAuthorization(String from, String to,
            BigInteger value, BigInteger validAfter, BigInteger validBefore, byte[] nonce,
            BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_transferWithAuthorization, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(validAfter), 
                new org.web3j.abi.datatypes.generated.Uint256(validBefore), 
                new org.web3j.abi.datatypes.generated.Bytes32(nonce), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unBlacklist(String _account) {
        final Function function = new Function(
                FUNC_UNBLACKLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBlacklister(String _newBlacklister) {
        final Function function = new Function(
                FUNC_UPDATEBLACKLISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newBlacklister)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateMasterMinter(String _newMasterMinter) {
        final Function function = new Function(
                FUNC_UPDATEMASTERMINTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newMasterMinter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePauser(String _newPauser) {
        final Function function = new Function(
                FUNC_UPDATEPAUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newPauser)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRescuer(String newRescuer) {
        final Function function = new Function(
                FUNC_UPDATERESCUER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newRescuer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> version() {
        final Function function = new Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<AuthorizationCanceledEventResponse> getAuthorizationCanceledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUTHORIZATIONCANCELED_EVENT, transactionReceipt);
        ArrayList<AuthorizationCanceledEventResponse> responses = new ArrayList<AuthorizationCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuthorizationCanceledEventResponse typedResponse = new AuthorizationCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.authorizer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nonce = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AuthorizationCanceledEventResponse getAuthorizationCanceledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUTHORIZATIONCANCELED_EVENT, log);
        AuthorizationCanceledEventResponse typedResponse = new AuthorizationCanceledEventResponse();
        typedResponse.log = log;
        typedResponse.authorizer = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nonce = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AuthorizationCanceledEventResponse> authorizationCanceledEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuthorizationCanceledEventFromLog(log));
    }

    public Flowable<AuthorizationCanceledEventResponse> authorizationCanceledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTHORIZATIONCANCELED_EVENT));
        return authorizationCanceledEventFlowable(filter);
    }

    public static List<AuthorizationUsedEventResponse> getAuthorizationUsedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUTHORIZATIONUSED_EVENT, transactionReceipt);
        ArrayList<AuthorizationUsedEventResponse> responses = new ArrayList<AuthorizationUsedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuthorizationUsedEventResponse typedResponse = new AuthorizationUsedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.authorizer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nonce = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AuthorizationUsedEventResponse getAuthorizationUsedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUTHORIZATIONUSED_EVENT, log);
        AuthorizationUsedEventResponse typedResponse = new AuthorizationUsedEventResponse();
        typedResponse.log = log;
        typedResponse.authorizer = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nonce = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AuthorizationUsedEventResponse> authorizationUsedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuthorizationUsedEventFromLog(log));
    }

    public Flowable<AuthorizationUsedEventResponse> authorizationUsedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTHORIZATIONUSED_EVENT));
        return authorizationUsedEventFlowable(filter);
    }

    public static List<BlacklistedEventResponse> getBlacklistedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BLACKLISTED_EVENT, transactionReceipt);
        ArrayList<BlacklistedEventResponse> responses = new ArrayList<BlacklistedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BlacklistedEventResponse typedResponse = new BlacklistedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BlacklistedEventResponse getBlacklistedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BLACKLISTED_EVENT, log);
        BlacklistedEventResponse typedResponse = new BlacklistedEventResponse();
        typedResponse.log = log;
        typedResponse._account = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<BlacklistedEventResponse> blacklistedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBlacklistedEventFromLog(log));
    }

    public Flowable<BlacklistedEventResponse> blacklistedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLACKLISTED_EVENT));
        return blacklistedEventFlowable(filter);
    }

    public static List<BlacklisterChangedEventResponse> getBlacklisterChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BLACKLISTERCHANGED_EVENT, transactionReceipt);
        ArrayList<BlacklisterChangedEventResponse> responses = new ArrayList<BlacklisterChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BlacklisterChangedEventResponse typedResponse = new BlacklisterChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newBlacklister = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BlacklisterChangedEventResponse getBlacklisterChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BLACKLISTERCHANGED_EVENT, log);
        BlacklisterChangedEventResponse typedResponse = new BlacklisterChangedEventResponse();
        typedResponse.log = log;
        typedResponse.newBlacklister = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<BlacklisterChangedEventResponse> blacklisterChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBlacklisterChangedEventFromLog(log));
    }

    public Flowable<BlacklisterChangedEventResponse> blacklisterChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLACKLISTERCHANGED_EVENT));
        return blacklisterChangedEventFlowable(filter);
    }

    public static List<BurnEventResponse> getBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BURN_EVENT, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.burner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BurnEventResponse getBurnEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BURN_EVENT, log);
        BurnEventResponse typedResponse = new BurnEventResponse();
        typedResponse.log = log;
        typedResponse.burner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<BurnEventResponse> burnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBurnEventFromLog(log));
    }

    public Flowable<BurnEventResponse> burnEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURN_EVENT));
        return burnEventFlowable(filter);
    }

    public static List<MasterMinterChangedEventResponse> getMasterMinterChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MASTERMINTERCHANGED_EVENT, transactionReceipt);
        ArrayList<MasterMinterChangedEventResponse> responses = new ArrayList<MasterMinterChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MasterMinterChangedEventResponse typedResponse = new MasterMinterChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newMasterMinter = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MasterMinterChangedEventResponse getMasterMinterChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MASTERMINTERCHANGED_EVENT, log);
        MasterMinterChangedEventResponse typedResponse = new MasterMinterChangedEventResponse();
        typedResponse.log = log;
        typedResponse.newMasterMinter = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MasterMinterChangedEventResponse> masterMinterChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMasterMinterChangedEventFromLog(log));
    }

    public Flowable<MasterMinterChangedEventResponse> masterMinterChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MASTERMINTERCHANGED_EVENT));
        return masterMinterChangedEventFlowable(filter);
    }

    public static List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MINT_EVENT, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.minter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MintEventResponse getMintEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MINT_EVENT, log);
        MintEventResponse typedResponse = new MintEventResponse();
        typedResponse.log = log;
        typedResponse.minter = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MintEventResponse> mintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMintEventFromLog(log));
    }

    public Flowable<MintEventResponse> mintEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINT_EVENT));
        return mintEventFlowable(filter);
    }

    public static List<MinterConfiguredEventResponse> getMinterConfiguredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MINTERCONFIGURED_EVENT, transactionReceipt);
        ArrayList<MinterConfiguredEventResponse> responses = new ArrayList<MinterConfiguredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MinterConfiguredEventResponse typedResponse = new MinterConfiguredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.minter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.minterAllowedAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MinterConfiguredEventResponse getMinterConfiguredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MINTERCONFIGURED_EVENT, log);
        MinterConfiguredEventResponse typedResponse = new MinterConfiguredEventResponse();
        typedResponse.log = log;
        typedResponse.minter = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.minterAllowedAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MinterConfiguredEventResponse> minterConfiguredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMinterConfiguredEventFromLog(log));
    }

    public Flowable<MinterConfiguredEventResponse> minterConfiguredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTERCONFIGURED_EVENT));
        return minterConfiguredEventFlowable(filter);
    }

    public static List<MinterRemovedEventResponse> getMinterRemovedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MINTERREMOVED_EVENT, transactionReceipt);
        ArrayList<MinterRemovedEventResponse> responses = new ArrayList<MinterRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MinterRemovedEventResponse typedResponse = new MinterRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldMinter = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MinterRemovedEventResponse getMinterRemovedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MINTERREMOVED_EVENT, log);
        MinterRemovedEventResponse typedResponse = new MinterRemovedEventResponse();
        typedResponse.log = log;
        typedResponse.oldMinter = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MinterRemovedEventResponse> minterRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMinterRemovedEventFromLog(log));
    }

    public Flowable<MinterRemovedEventResponse> minterRemovedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTERREMOVED_EVENT));
        return minterRemovedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSE_EVENT, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PauseEventResponse getPauseEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSE_EVENT, log);
        PauseEventResponse typedResponse = new PauseEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPauseEventFromLog(log));
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSE_EVENT));
        return pauseEventFlowable(filter);
    }

    public static List<PauserChangedEventResponse> getPauserChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSERCHANGED_EVENT, transactionReceipt);
        ArrayList<PauserChangedEventResponse> responses = new ArrayList<PauserChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauserChangedEventResponse typedResponse = new PauserChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PauserChangedEventResponse getPauserChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSERCHANGED_EVENT, log);
        PauserChangedEventResponse typedResponse = new PauserChangedEventResponse();
        typedResponse.log = log;
        typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PauserChangedEventResponse> pauserChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPauserChangedEventFromLog(log));
    }

    public Flowable<PauserChangedEventResponse> pauserChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSERCHANGED_EVENT));
        return pauserChangedEventFlowable(filter);
    }

    public static List<RescuerChangedEventResponse> getRescuerChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RESCUERCHANGED_EVENT, transactionReceipt);
        ArrayList<RescuerChangedEventResponse> responses = new ArrayList<RescuerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RescuerChangedEventResponse typedResponse = new RescuerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newRescuer = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RescuerChangedEventResponse getRescuerChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RESCUERCHANGED_EVENT, log);
        RescuerChangedEventResponse typedResponse = new RescuerChangedEventResponse();
        typedResponse.log = log;
        typedResponse.newRescuer = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RescuerChangedEventResponse> rescuerChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRescuerChangedEventFromLog(log));
    }

    public Flowable<RescuerChangedEventResponse> rescuerChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESCUERCHANGED_EVENT));
        return rescuerChangedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnBlacklistedEventResponse> getUnBlacklistedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNBLACKLISTED_EVENT, transactionReceipt);
        ArrayList<UnBlacklistedEventResponse> responses = new ArrayList<UnBlacklistedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnBlacklistedEventResponse typedResponse = new UnBlacklistedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnBlacklistedEventResponse getUnBlacklistedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNBLACKLISTED_EVENT, log);
        UnBlacklistedEventResponse typedResponse = new UnBlacklistedEventResponse();
        typedResponse.log = log;
        typedResponse._account = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnBlacklistedEventResponse> unBlacklistedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnBlacklistedEventFromLog(log));
    }

    public Flowable<UnBlacklistedEventResponse> unBlacklistedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNBLACKLISTED_EVENT));
        return unBlacklistedEventFlowable(filter);
    }

    public static List<UnpauseEventResponse> getUnpauseEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSE_EVENT, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpauseEventResponse getUnpauseEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSE_EVENT, log);
        UnpauseEventResponse typedResponse = new UnpauseEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpauseEventFromLog(log));
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSE_EVENT));
        return unpauseEventFlowable(filter);
    }

    @Deprecated
    public static FiatTokenV2_2 load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new FiatTokenV2_2(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FiatTokenV2_2 load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FiatTokenV2_2(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FiatTokenV2_2 load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new FiatTokenV2_2(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FiatTokenV2_2 load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FiatTokenV2_2(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FiatTokenV2_2> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(FiatTokenV2_2.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<FiatTokenV2_2> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(FiatTokenV2_2.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<FiatTokenV2_2> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(FiatTokenV2_2.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<FiatTokenV2_2> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(FiatTokenV2_2.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class AuthorizationCanceledEventResponse extends BaseEventResponse {
        public String authorizer;

        public byte[] nonce;
    }

    public static class AuthorizationUsedEventResponse extends BaseEventResponse {
        public String authorizer;

        public byte[] nonce;
    }

    public static class BlacklistedEventResponse extends BaseEventResponse {
        public String _account;
    }

    public static class BlacklisterChangedEventResponse extends BaseEventResponse {
        public String newBlacklister;
    }

    public static class BurnEventResponse extends BaseEventResponse {
        public String burner;

        public BigInteger amount;
    }

    public static class MasterMinterChangedEventResponse extends BaseEventResponse {
        public String newMasterMinter;
    }

    public static class MintEventResponse extends BaseEventResponse {
        public String minter;

        public String to;

        public BigInteger amount;
    }

    public static class MinterConfiguredEventResponse extends BaseEventResponse {
        public String minter;

        public BigInteger minterAllowedAmount;
    }

    public static class MinterRemovedEventResponse extends BaseEventResponse {
        public String oldMinter;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PauseEventResponse extends BaseEventResponse {
    }

    public static class PauserChangedEventResponse extends BaseEventResponse {
        public String newAddress;
    }

    public static class RescuerChangedEventResponse extends BaseEventResponse {
        public String newRescuer;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnBlacklistedEventResponse extends BaseEventResponse {
        public String _account;
    }

    public static class UnpauseEventResponse extends BaseEventResponse {
    }
}
